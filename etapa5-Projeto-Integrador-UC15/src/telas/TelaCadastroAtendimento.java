package telas;

import classes.Atendimento;
import classes.AtendimentoDAO;
import classes.Auxiliar;
import classes.AuxiliarDAO;
import classes.Convenio;
import classes.ConvenioDAO;
import classes.Dentista;
import classes.DentistaDAO;
import classes.Especialidade;
import classes.EspecialidadeDAO;
import classes.Paciente;
import classes.PacienteDAO;
import classes.Pagamento;
import classes.PagamentoDAO;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.List;

public class TelaCadastroAtendimento extends javax.swing.JFrame {

    private TelaPrincipal telaPrincipal;
    private EspecialidadeDAO especDao = new EspecialidadeDAO();

    public void MostraTela(TelaPrincipal obj) {
        this.telaPrincipal = obj;
        setVisible(true);
    }

    public TelaCadastroAtendimento() {
        initComponents();
        preencheComboBoxDentistas();
        preencheComboBoxAuxiliares();
        preencheComboBoxPacientes();
        geraAcessibilidade();
        cbDentistaAtendeu.setEnabled(false);
        cbAuxiliar.setEnabled(false);
        txtNCartao.setEnabled(false);
        btnFinalizar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblCadastroPaciente = new javax.swing.JLabel();
        btnCadastrar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        lblData = new javax.swing.JLabel();
        lblValor = new javax.swing.JLabel();
        lblNConvenio = new javax.swing.JLabel();
        txtNConvenio = new javax.swing.JTextField();
        lblPaciente = new javax.swing.JLabel();
        txtDataHora = new javax.swing.JFormattedTextField();
        lblDentistaMarcado = new javax.swing.JLabel();
        lblDentistaAtendeu = new javax.swing.JLabel();
        lblAuxiliar = new javax.swing.JLabel();
        lblObservacoes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObservacoes = new javax.swing.JTextArea();
        txtValor = new javax.swing.JTextField();
        pnlPagamento = new javax.swing.JPanel();
        lblTipo = new javax.swing.JLabel();
        rdbtnDinheiro = new javax.swing.JRadioButton();
        rdbtnCartao = new javax.swing.JRadioButton();
        lblParcelas = new javax.swing.JLabel();
        lblNCartao = new javax.swing.JLabel();
        txtNCartao = new javax.swing.JFormattedTextField();
        txtParcelas = new javax.swing.JFormattedTextField();
        lblPaciente1 = new javax.swing.JLabel();
        cbEspecialidade = new javax.swing.JComboBox<>();
        cbDentistaMarcado = new javax.swing.JComboBox<>();
        cbDentistaAtendeu = new javax.swing.JComboBox<>();
        cbAuxiliar = new javax.swing.JComboBox<>();
        btnFinalizar = new javax.swing.JButton();
        cbPaciente = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SICODON");

        jPanel1.setBackground(new java.awt.Color(239, 235, 235));

        lblCadastroPaciente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblCadastroPaciente.setText("Cadastro de Atendimento");

        btnCadastrar.setBackground(new java.awt.Color(30, 48, 112));
        btnCadastrar.setFont(new java.awt.Font("Segoe UI", 0, 35)); // NOI18N
        btnCadastrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnCancelar.setBackground(new java.awt.Color(30, 48, 112));
        btnCancelar.setFont(new java.awt.Font("Segoe UI", 0, 35)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/xis_.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        lblData.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblData.setLabelFor(txtDataHora);
        lblData.setText("Data e Hora:");

        lblValor.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblValor.setLabelFor(txtValor);
        lblValor.setText("Valor:");

        lblNConvenio.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblNConvenio.setLabelFor(txtNConvenio);
        lblNConvenio.setText("Nº de Convênio:");

        txtNConvenio.setBackground(new java.awt.Color(199, 199, 199));
        txtNConvenio.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtNConvenio.setNextFocusableComponent(cbPaciente);

        lblPaciente.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblPaciente.setText("Paciente:");

        txtDataHora.setBackground(new java.awt.Color(199, 199, 199));
        try {
            txtDataHora.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/#### ##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDataHora.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtDataHora.setNextFocusableComponent(txtValor);

        lblDentistaMarcado.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblDentistaMarcado.setLabelFor(cbDentistaMarcado);
        lblDentistaMarcado.setText("Dentista Marcado:");

        lblDentistaAtendeu.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblDentistaAtendeu.setLabelFor(cbDentistaAtendeu);
        lblDentistaAtendeu.setText("Dentista Atendeu:");

        lblAuxiliar.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblAuxiliar.setLabelFor(cbAuxiliar);
        lblAuxiliar.setText("Auxiliar:");

        lblObservacoes.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblObservacoes.setLabelFor(txtObservacoes);
        lblObservacoes.setText("Observações:");

        txtObservacoes.setBackground(new java.awt.Color(199, 199, 199));
        txtObservacoes.setColumns(20);
        txtObservacoes.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtObservacoes.setRows(5);
        jScrollPane1.setViewportView(txtObservacoes);

        txtValor.setBackground(new java.awt.Color(199, 199, 199));
        txtValor.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtValor.setNextFocusableComponent(txtNConvenio);

        pnlPagamento.setBackground(new java.awt.Color(239, 235, 235));
        pnlPagamento.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pagamento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 26))); // NOI18N

        lblTipo.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblTipo.setText("Tipo:");

        buttonGroup1.add(rdbtnDinheiro);
        rdbtnDinheiro.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        rdbtnDinheiro.setText("Dinheiro");
        rdbtnDinheiro.setNextFocusableComponent(rdbtnCartao);
        rdbtnDinheiro.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdbtnDinheiroStateChanged(evt);
            }
        });
        rdbtnDinheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbtnDinheiroActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdbtnCartao);
        rdbtnCartao.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        rdbtnCartao.setText("Cartão");
        rdbtnCartao.setNextFocusableComponent(txtParcelas);
        rdbtnCartao.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdbtnCartaoStateChanged(evt);
            }
        });
        rdbtnCartao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbtnCartaoActionPerformed(evt);
            }
        });

        lblParcelas.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblParcelas.setLabelFor(txtParcelas);
        lblParcelas.setText("Parcelas:");

        lblNCartao.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblNCartao.setLabelFor(txtNCartao);
        lblNCartao.setText("Nº Cartão:");

        txtNCartao.setBackground(new java.awt.Color(199, 199, 199));
        try {
            txtNCartao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("############")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtNCartao.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtNCartao.setNextFocusableComponent(cbDentistaMarcado);

        txtParcelas.setBackground(new java.awt.Color(199, 199, 199));
        txtParcelas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtParcelas.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtParcelas.setNextFocusableComponent(txtNCartao);

        javax.swing.GroupLayout pnlPagamentoLayout = new javax.swing.GroupLayout(pnlPagamento);
        pnlPagamento.setLayout(pnlPagamentoLayout);
        pnlPagamentoLayout.setHorizontalGroup(
            pnlPagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPagamentoLayout.createSequentialGroup()
                        .addComponent(lblTipo)
                        .addGap(18, 18, 18)
                        .addComponent(rdbtnDinheiro)
                        .addGap(18, 18, 18)
                        .addComponent(rdbtnCartao)
                        .addGap(18, 18, 18)
                        .addComponent(lblParcelas)
                        .addGap(18, 18, 18)
                        .addComponent(txtParcelas, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                    .addGroup(pnlPagamentoLayout.createSequentialGroup()
                        .addComponent(lblNCartao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNCartao)))
                .addGap(17, 17, 17))
        );
        pnlPagamentoLayout.setVerticalGroup(
            pnlPagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagamentoLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnlPagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipo)
                    .addComponent(rdbtnDinheiro)
                    .addComponent(rdbtnCartao)
                    .addComponent(lblParcelas)
                    .addComponent(txtParcelas, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlPagamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNCartao)
                    .addComponent(txtNCartao, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        lblPaciente1.setFont(new java.awt.Font("Segoe UI", 0, 26)); // NOI18N
        lblPaciente1.setLabelFor(cbEspecialidade);
        lblPaciente1.setText("Especialidade procurada:");

        cbEspecialidade.setBackground(new java.awt.Color(199, 199, 199));
        cbEspecialidade.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        cbEspecialidade.setModel(especDao.modeloComboBox());
        cbEspecialidade.setNextFocusableComponent(rdbtnDinheiro);

        cbDentistaMarcado.setBackground(new java.awt.Color(199, 199, 199));
        cbDentistaMarcado.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        cbDentistaMarcado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N/A" }));

        cbDentistaAtendeu.setBackground(new java.awt.Color(199, 199, 199));
        cbDentistaAtendeu.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        cbDentistaAtendeu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N/A" }));

        cbAuxiliar.setBackground(new java.awt.Color(199, 199, 199));
        cbAuxiliar.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        cbAuxiliar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N/A" }));
        cbAuxiliar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAuxiliarActionPerformed(evt);
            }
        });

        btnFinalizar.setBackground(new java.awt.Color(30, 48, 112));
        btnFinalizar.setFont(new java.awt.Font("Segoe UI", 0, 35)); // NOI18N
        btnFinalizar.setForeground(new java.awt.Color(255, 255, 255));
        btnFinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/salvar_.png"))); // NOI18N
        btnFinalizar.setText("Finalizar");
        btnFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarActionPerformed(evt);
            }
        });

        cbPaciente.setBackground(new java.awt.Color(199, 199, 199));
        cbPaciente.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        cbPaciente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N/A" }));
        cbPaciente.setNextFocusableComponent(cbEspecialidade);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPaciente1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbEspecialidade, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblCadastroPaciente)
                                .addComponent(pnlPagamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblNConvenio)
                                            .addComponent(lblData)
                                            .addComponent(lblPaciente))
                                        .addGap(22, 22, 22))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblValor)
                                        .addGap(154, 154, 154)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDataHora, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                    .addComponent(txtNConvenio)
                                    .addComponent(txtValor, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cbPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(153, 153, 153)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblDentistaMarcado)
                                    .addComponent(lblDentistaAtendeu)
                                    .addComponent(lblAuxiliar)
                                    .addComponent(lblObservacoes))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1)
                                    .addComponent(cbDentistaMarcado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbDentistaAtendeu, 0, 1, Short.MAX_VALUE)
                                    .addComponent(cbAuxiliar, 0, 0, Short.MAX_VALUE))
                                .addContainerGap(27, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                                .addComponent(btnFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblCadastroPaciente)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(txtDataHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblData)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblValor))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNConvenio)
                            .addComponent(txtNConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPaciente)
                            .addComponent(cbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPaciente1)
                            .addComponent(cbEspecialidade, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(pnlPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(cbDentistaMarcado, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(lblDentistaAtendeu)
                                            .addComponent(cbDentistaAtendeu, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblDentistaMarcado)
                                        .addGap(48, 48, 48)))
                                .addComponent(lblAuxiliar)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblObservacoes)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(cbAuxiliar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(206, 206, 206)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void rdbtnDinheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnDinheiroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbtnDinheiroActionPerformed

    private void rdbtnCartaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnCartaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbtnCartaoActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        cadastraAtendimento();
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void rdbtnCartaoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdbtnCartaoStateChanged
        if (rdbtnCartao.isSelected() == true) {
            txtNCartao.setEnabled(true);
        }
    }//GEN-LAST:event_rdbtnCartaoStateChanged

    private void rdbtnDinheiroStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdbtnDinheiroStateChanged
        if (rdbtnCartao.isSelected() == false) {
            txtNCartao.setText("");
            txtNCartao.setEnabled(false);
        }
    }//GEN-LAST:event_rdbtnDinheiroStateChanged

    private void btnFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarActionPerformed
        finalizaAtendimento();
    }//GEN-LAST:event_btnFinalizarActionPerformed

    private void cbAuxiliarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAuxiliarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbAuxiliarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroAtendimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroAtendimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroAtendimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroAtendimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaCadastroAtendimento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnFinalizar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbAuxiliar;
    private javax.swing.JComboBox<String> cbDentistaAtendeu;
    private javax.swing.JComboBox<String> cbDentistaMarcado;
    private javax.swing.JComboBox<String> cbEspecialidade;
    private javax.swing.JComboBox<String> cbPaciente;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAuxiliar;
    private javax.swing.JLabel lblCadastroPaciente;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblDentistaAtendeu;
    private javax.swing.JLabel lblDentistaMarcado;
    private javax.swing.JLabel lblNCartao;
    private javax.swing.JLabel lblNConvenio;
    private javax.swing.JLabel lblObservacoes;
    private javax.swing.JLabel lblPaciente;
    private javax.swing.JLabel lblPaciente1;
    private javax.swing.JLabel lblParcelas;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JLabel lblValor;
    private javax.swing.JPanel pnlPagamento;
    private javax.swing.JRadioButton rdbtnCartao;
    private javax.swing.JRadioButton rdbtnDinheiro;
    private javax.swing.JFormattedTextField txtDataHora;
    private javax.swing.JFormattedTextField txtNCartao;
    private javax.swing.JTextField txtNConvenio;
    private javax.swing.JTextArea txtObservacoes;
    private javax.swing.JFormattedTextField txtParcelas;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables

    /**
     * Realiza o cadastro de atendimentos, integrando o método 'conectar' da
     * classe AtendimentoDAO
     */
    public void cadastraAtendimento() {
        try {
            if (txtDataHora.getText().isEmpty() || txtValor.getText().isEmpty() || cbPaciente.getSelectedItem().equals("N/A") || cbDentistaMarcado.getSelectedItem().equals("N/A") || txtParcelas.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Os campos Data e Hora, Valor, Paciente, Dentista Marcado e Parcelas precisam ser preenchidos.\nCaso o pagamento não tenha sido divido em parcelas utiliza o valor 1.");
            } else if (Double.parseDouble(txtValor.getText()) < 0 || Integer.parseInt(txtParcelas.getText()) < 0) {
                JOptionPane.showMessageDialog(null, "Os Valores e Parcelas não podem ser negativos.");
            } else if (rdbtnDinheiro.isSelected() == false && rdbtnCartao.isSelected() == false) {
                JOptionPane.showMessageDialog(null, "Selecione uma das opções para Tipo de Pagamento.");
            } else if (rdbtnCartao.isSelected() == true && txtNCartao.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Se o pagamento for Cartão, digite o número do cartão.");
            } else {
                Atendimento atendimento = new Atendimento();
                Pagamento pagamento = new Pagamento();
                AtendimentoDAO atenDao = new AtendimentoDAO();
                Especialidade especialidade = new Especialidade();
                EspecialidadeDAO especDao = new EspecialidadeDAO();
                Paciente paciente = new Paciente();
                PacienteDAO pacDao = new PacienteDAO();
                Dentista dentistaMarcado = new Dentista();
                DentistaDAO dentistaDao = new DentistaDAO();
                Convenio convenio = new Convenio();
                ConvenioDAO convDao = new ConvenioDAO();
                PagamentoDAO pagDao = new PagamentoDAO();
                boolean status;
                int resposta;
                DateTimeFormatter formatador = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
                //String dataHoraRecebida = txtDataHora.getText();

                pagamento.setParcelas(Integer.parseInt(txtParcelas.getText()));
                pagamento.setNumeroCartao(txtNCartao.getText());
                if (rdbtnDinheiro.isSelected() == true) {
                    pagamento.setTipo('D');
                } else if (rdbtnCartao.isSelected() == true) {
                    pagamento.setTipo('C');
                }

                status = pagDao.conectar();
                if (status == false) {
                    JOptionPane.showMessageDialog(null, "Erro de conexão.");
                } else {
                    pagDao.salvar(pagamento);
                }
                atendimento.setPagamento(pagDao.retornaUltimoPagamento());

                try {
                    atendimento.setDataHora(LocalDateTime.parse(txtDataHora.getText(), formatador));
                } catch (DateTimeParseException exc) {
                    JOptionPane.showMessageDialog(null, "Erro: Dia e/ou Mês inválido(s).\nDigite uma data válida.");
                    pagDao.excluir(pagDao.retornaUltimoPagamento().getId());//Caso haja um erro de cadastro de atendimento, apaga o pagamento que foi cadastrado que seria vinculado a esse pagamento
                }
                pagDao.desconectar();

                atendimento.setValor(Double.parseDouble(txtValor.getText()));
                atendimento.setObservacoes(txtObservacoes.getText());
                atendimento.setNumeroConvenio(txtNConvenio.getText());

                status = especDao.conectar();
                if (status == false) {
                    JOptionPane.showMessageDialog(null, "Erro de conexão.");
                } else {
                    especialidade = especDao.retornaEspecialidade(String.valueOf(cbEspecialidade.getSelectedItem()));
                }
                especDao.desconectar();

                atendimento.setEspecialidade(especialidade);

                status = pacDao.conectar();
                if (status == false) {
                    JOptionPane.showMessageDialog(null, "Erro de conexão.");
                } else {
                    paciente = pacDao.retornaPaciente(String.valueOf(cbPaciente.getSelectedItem()));
                }
                pacDao.desconectar();

                atendimento.setPaciente(paciente);

                status = convDao.conectar();
                if (status == false) {
                    JOptionPane.showMessageDialog(null, "Erro de conexão.");
                } else {
                    convenio = convDao.retornaConvenio(paciente.getConvenio().getNome());
                }
                convDao.desconectar();

                atendimento.setConvenio(convenio);

                status = dentistaDao.conectar();
                if (status == false) {
                    JOptionPane.showMessageDialog(null, "Erro de conexão.");
                } else {
                    dentistaMarcado = dentistaDao.retornaDentista(String.valueOf(cbDentistaMarcado.getSelectedItem()));
                }
                dentistaDao.desconectar();

                atendimento.setDentistaMarcado(dentistaMarcado);
                atendimento.setDentistaAtendeu(null);
                atendimento.setAuxiliar(null);

                status = atenDao.conectar();
                if (status == false) {
                    JOptionPane.showMessageDialog(null, "Erro de conexão.");
                } else {
                    resposta = atenDao.salvar(atendimento);
                    switch (resposta) {
                        case 1:
                            telaPrincipal.atualizaTabelaAtendimento();
                            JOptionPane.showMessageDialog(null, "Cadastro de atendimento efetuado com sucesso.");
                            break;
                        case 1062:
                            JOptionPane.showMessageDialog(null, "Atendimento já foi cadastrado.");
                            break;
                        default:
                            JOptionPane.showMessageDialog(null, "Erro ao tentar salvar dado.");
                            break;
                    }
                    atenDao.desconectar();
                    dispose();
                }
            }
        } catch (DateTimeParseException exc) {
            JOptionPane.showMessageDialog(null, "Erro: Data ou horário inválido(s).\nDigite uma data e/ou horário válidos.");
        }
    }

    /**
     * Abre e preenche os dados de um Atendimento na tela de cadastro para que
     * ele seja finalizado
     */
    public void insereAtendimentoSelecionado() {
        Atendimento atendimento = new Atendimento();
        AtendimentoDAO atenDao = new AtendimentoDAO();
        boolean status;
        int resposta;

        status = atenDao.conectar();
        if (status == false) {
            JOptionPane.showMessageDialog(null, "Erro de conexão.");
        } else {
            atendimento = atenDao.retornaAtendimento(telaPrincipal.retornaIdAtendimentoSelecionado());
            txtDataHora.setText(telaPrincipal.reverterDataHora(String.valueOf(atendimento.getDataHora())));
            txtDataHora.setEnabled(false);
            txtNConvenio.setText(atendimento.getNumeroConvenio());
            txtNConvenio.setEnabled(false);
            txtValor.setText(String.valueOf(atendimento.getValor()));
            txtValor.setEnabled(false);
            txtObservacoes.setText(atendimento.getObservacoes());
            txtNCartao.setText(atendimento.getPagamento().getNumeroCartao());
            txtParcelas.setText(String.valueOf(atendimento.getPagamento().getParcelas()));
            txtParcelas.setEnabled(false);
            if (atendimento.getPagamento().getTipo() == 'C') {
                rdbtnCartao.setSelected(true);
            } else if (atendimento.getPagamento().getTipo() == 'D') {
                rdbtnDinheiro.setSelected(true);
            }
            rdbtnCartao.setEnabled(false);
            rdbtnDinheiro.setEnabled(false);
            txtNCartao.setEnabled(false);

            String nomeDentistaMarcado, nomePaciente, nomeEspecialidade;
            nomeDentistaMarcado = atendimento.getDentistaMarcado().getNome();
            nomePaciente = atendimento.getPaciente().getNome();
            nomeEspecialidade = atendimento.getEspecialidade().getNome();

            cbPaciente.setSelectedItem(nomePaciente);
            cbPaciente.setEnabled(false);
            cbDentistaMarcado.setSelectedItem(nomeDentistaMarcado);
            cbDentistaMarcado.setEnabled(false);
            cbEspecialidade.setSelectedItem(nomeEspecialidade);
            cbEspecialidade.setEnabled(false);

            btnCadastrar.setEnabled(false);
            btnFinalizar.setEnabled(true);
            cbDentistaAtendeu.setEnabled(true);
            cbAuxiliar.setEnabled(true);

        }
        atenDao.desconectar();
    }

    /**
     * Finaliza um atendimento, indicando o dentista que de fato o realizou e,
     * caso tenha sido necessário, também cadastra o auxiliar que ajudou nos
     * procedimentos
     */
    public void finalizaAtendimento() {
        if (cbDentistaAtendeu.getSelectedItem().equals("N/A")) {
            JOptionPane.showMessageDialog(null, "Selecione um(a) Cirurgiã(o) Dentista no campo Dentista Atendeu.");
        } else {
            AtendimentoDAO ateDao = new AtendimentoDAO();
            Atendimento atendimento = ateDao.retornaAtendimento(telaPrincipal.retornaIdAtendimentoSelecionado());
            Dentista dentistaAtendeu = new Dentista();
            DentistaDAO denDao = new DentistaDAO();
            Auxiliar auxiliar = new Auxiliar();
            AuxiliarDAO auxDao = new AuxiliarDAO();
            boolean status;
            int resposta;

            status = denDao.conectar();
            if (status == false) {
                JOptionPane.showMessageDialog(null, "Erro de conexão.");
            } else {
                dentistaAtendeu = denDao.retornaDentista(String.valueOf(cbDentistaAtendeu.getSelectedItem()));
            }
            denDao.desconectar();

            status = auxDao.conectar();
            if (status == false) {
                JOptionPane.showMessageDialog(null, "Erro de conexão.");
            } else {
                auxiliar = auxDao.retornaAuxiliar(String.valueOf(cbAuxiliar.getSelectedItem()));
            }
            auxDao.desconectar();

            atendimento.setAuxiliar(auxiliar);
            atendimento.setDentistaAtendeu(dentistaAtendeu);

            status = ateDao.conectar();
            if (status == false) {
                JOptionPane.showMessageDialog(null, "Erro de conexão");
            } else {
                resposta = ateDao.finalizaAtendimentoDentista(atendimento);
                switch (resposta) {
                    case 1:
                        telaPrincipal.atualizaTabelaAtendimento();
                        JOptionPane.showMessageDialog(null, "Dados atualizados com sucesso");
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Erro ao tentar inserir dados");
                        break;
                }
                if (atendimento.getAuxiliar() != null) {
                    resposta = ateDao.finalizaAtendimentoAuxiliar(atendimento);
                    switch (resposta) {
                        case 1:
                            telaPrincipal.atualizaTabelaAtendimento();
                            JOptionPane.showMessageDialog(null, "Dados atualizados com sucesso");
                            break;
                        default:
                            JOptionPane.showMessageDialog(null, "Erro ao tentar inserir dados");
                            break;
                    }
                }

                ateDao.desconectar();
            }
            dispose();
        }
    }

    /*public void confereAtendimento() {
        if (!telaPrincipal.retornaAtendimento().getDentistaAtendeu().getNome().isEmpty()) {
            cbDentistaAtendeu.setEnabled(false);
            cbAuxiliar.setEnabled(false);
            btnFinalizar.setEnabled(false);
        }
    }*/
    /**
     * Preenche a ComboBox com o nome dos dentistas contidos no Banco de Dados
     */
    public void preencheComboBoxDentistas() {
        DentistaDAO dao = new DentistaDAO();
        String nomeDentista;
        List<Dentista> listaDentistas = dao.listar();
        for (Dentista d : listaDentistas) {
            nomeDentista = d.getNome();
            cbDentistaMarcado.addItem(nomeDentista);
            cbDentistaAtendeu.addItem(nomeDentista);
        }
        dao.desconectar();
    }

    /**
     * Preenche a ComboBox com o nome dos auxiliares contidos no Banco de Dados
     */
    public void preencheComboBoxAuxiliares() {
        AuxiliarDAO dao = new AuxiliarDAO();
        String nomeAuxiliar;
        List<Auxiliar> listaAuxiliares = dao.listar();
        for (Auxiliar a : listaAuxiliares) {
            nomeAuxiliar = a.getNome();
            cbAuxiliar.addItem(nomeAuxiliar);
        }
        dao.desconectar();
    }

    /**
     * Preenche a ComboBox com o nome dos pacientes contidos no Banco de Dados
     */
    public void preencheComboBoxPacientes() {
        PacienteDAO dao = new PacienteDAO();
        String nomePaciente;
        List<Paciente> listaPacientes = dao.listar();
        for (Paciente p : listaPacientes) {
            nomePaciente = p.getNome();
            cbPaciente.addItem(nomePaciente);
        }
        dao.desconectar();
    }

    /**
     * Gera atalho de teclas para determinados comandos
     */
    public void geraAcessibilidade() {
        btnCadastrar.setMnemonic(KeyEvent.VK_D);
        btnCancelar.setMnemonic(KeyEvent.VK_C);
        btnFinalizar.setMnemonic(KeyEvent.VK_F);
    }
}
